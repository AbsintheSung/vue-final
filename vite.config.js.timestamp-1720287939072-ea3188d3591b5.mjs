// vite.config.js
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///C:/Users/user/Desktop/%E7%81%AB%E7%AE%AD%E9%9A%8A%E5%9F%B9%E8%A8%93/vue-final/node_modules/vite/dist/node/index.js";
import vue from "file:///C:/Users/user/Desktop/%E7%81%AB%E7%AE%AD%E9%9A%8A%E5%9F%B9%E8%A8%93/vue-final/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import eslintPlugin from "file:///C:/Users/user/Desktop/%E7%81%AB%E7%AE%AD%E9%9A%8A%E5%9F%B9%E8%A8%93/vue-final/node_modules/vite-plugin-eslint/dist/index.mjs";

// loadEnv.js
import dotenv from "file:///C:/Users/user/Desktop/%E7%81%AB%E7%AE%AD%E9%9A%8A%E5%9F%B9%E8%A8%93/vue-final/node_modules/dotenv/lib/main.js";
import path from "path";
import fs from "fs";
var getCurrentTimeString = () => {
  const now = /* @__PURE__ */ new Date();
  let hours = now.getHours();
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const seconds = String(now.getSeconds()).padStart(2, "0");
  const ampm = hours >= 12 ? "\u4E0B\u5348" : "\u4E0A\u5348";
  hours %= 12;
  hours = hours || 12;
  const hoursStr = String(hours).padStart(2, "0");
  return `${ampm}${hoursStr}:${minutes}:${seconds}`;
};
var customLog = (tag, message, tagColor = "\x1B[36m", messageColor = "\x1B[32m") => {
  const timeString = getCurrentTimeString();
  console.log(`\x1B[90m%s\x1B[0m ${tagColor}\x1B[1m%s\x1B[0m ${messageColor}%s\x1B[0m`, timeString, `[${tag}]`, message);
};
var loadEnv_default = (mode) => {
  const basePath = path.resolve(process.cwd(), ".env");
  const envPath = `${basePath}.${mode}`;
  const finalPath = fs.existsSync(envPath) ? envPath : basePath;
  const envConfig = dotenv.config({ path: finalPath });
  if (envConfig.error) {
    customLog("vite", "\u7121\u6CD5\u8B80\u53D6\u5230\u74B0\u5883\u8B8A\u6578(Environment Variables)\u6A94\u6848\u3002");
    customLog("vite", "\u8ACB\u5728\u7D42\u7AEF\u6A5F\u8F38\u5165\u300Ccp .env.example .env\u300D \u5EFA\u7ACB\u74B0\u5883\u8B8A\u6578\u6A94\u6848\u3002");
    customLog("vite", "\u76EE\u524D\u50C5\u652F\u63F4 .env\u3001.env.development\u3001.env.production \u4E09\u7A2E\u6A21\u5F0F\u3002");
  }
};

// vite.config.js
var __vite_injected_original_import_meta_url = "file:///C:/Users/user/Desktop/%E7%81%AB%E7%AE%AD%E9%9A%8A%E5%9F%B9%E8%A8%93/vue-final/vite.config.js";
var INVALID_CHAR_REGEX = /[\x00-\x1F\x7F<>*#"{}|^[\]`;?:&=+$,]/g;
var DRIVE_LETTER_REGEX = /^[a-z]:/i;
var vite_config_default = defineConfig(({ mode }) => {
  loadEnv_default(mode);
  return {
    base: process.env.NODE_ENV === "production" ? `/${process.env.REPOSITORY_NAME}/` : "/",
    plugins: [
      vue(),
      eslintPlugin({
        include: ["src/**/*.js", "src/**/*.vue", "src/*.js", "src/*.vue"]
      })
    ],
    resolve: {
      alias: {
        "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
      }
    },
    build: {
      rollupOptions: {
        output: {
          // https://github.com/rollup/rollup/blob/master/src/utils/sanitizeFileName.ts
          sanitizeFileName(name) {
            const match = DRIVE_LETTER_REGEX.exec(name);
            const driveLetter = match ? match[0] : "";
            return driveLetter + name.slice(driveLetter.length).replace(INVALID_CHAR_REGEX, "");
          }
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAibG9hZEVudi5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXHVzZXJcXFxcRGVza3RvcFxcXFxcdTcwNkJcdTdCQURcdTk2OEFcdTU3RjlcdThBMTNcXFxcdnVlLWZpbmFsXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFx1c2VyXFxcXERlc2t0b3BcXFxcXHU3MDZCXHU3QkFEXHU5NjhBXHU1N0Y5XHU4QTEzXFxcXHZ1ZS1maW5hbFxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvdXNlci9EZXNrdG9wLyVFNyU4MSVBQiVFNyVBRSVBRCVFOSU5QSU4QSVFNSU5RiVCOSVFOCVBOCU5My92dWUtZmluYWwvdml0ZS5jb25maWcuanNcIjtpbXBvcnQgeyBmaWxlVVJMVG9QYXRoLCBVUkwgfSBmcm9tICdub2RlOnVybCc7XHJcblxyXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcclxuaW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xyXG5pbXBvcnQgZXNsaW50UGx1Z2luIGZyb20gJ3ZpdGUtcGx1Z2luLWVzbGludCc7XHJcbmltcG9ydCBsb2FkRW52IGZyb20gJy4vbG9hZEVudic7XHJcblxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxyXG5jb25zdCBJTlZBTElEX0NIQVJfUkVHRVggPSAvW1xceDAwLVxceDFGXFx4N0Y8PiojXCJ7fXxeW1xcXWA7PzomPSskLF0vZztcclxuY29uc3QgRFJJVkVfTEVUVEVSX1JFR0VYID0gL15bYS16XTovaTtcclxuXHJcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+IHtcclxuICBsb2FkRW52KG1vZGUpO1xyXG4gIHJldHVybiAoe1xyXG4gICAgYmFzZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IGAvJHtwcm9jZXNzLmVudi5SRVBPU0lUT1JZX05BTUV9L2AgOiAnLycsXHJcbiAgICBwbHVnaW5zOiBbXHJcbiAgICAgIHZ1ZSgpLFxyXG4gICAgICBlc2xpbnRQbHVnaW4oe1xyXG4gICAgICAgIGluY2x1ZGU6IFsnc3JjLyoqLyouanMnLCAnc3JjLyoqLyoudnVlJywgJ3NyYy8qLmpzJywgJ3NyYy8qLnZ1ZSddLFxyXG4gICAgICB9KSxcclxuICAgIF0sXHJcbiAgICByZXNvbHZlOiB7XHJcbiAgICAgIGFsaWFzOiB7XHJcbiAgICAgICAgJ0AnOiBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4vc3JjJywgaW1wb3J0Lm1ldGEudXJsKSksXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IHtcclxuICAgICAgcm9sbHVwT3B0aW9uczoge1xyXG4gICAgICAgIG91dHB1dDoge1xyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2Jsb2IvbWFzdGVyL3NyYy91dGlscy9zYW5pdGl6ZUZpbGVOYW1lLnRzXHJcbiAgICAgICAgICBzYW5pdGl6ZUZpbGVOYW1lKG5hbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBEUklWRV9MRVRURVJfUkVHRVguZXhlYyhuYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgZHJpdmVMZXR0ZXIgPSBtYXRjaCA/IG1hdGNoWzBdIDogJyc7XHJcbiAgICAgICAgICAgIC8vIHN1YnN0ciBcdTY2MkZcdTg4QUJcdTZERDhcdTZDNzBcdThBOUVcdTZDRDVcdUZGMENcdTU2RTBcdTZCNjRcdTg5ODFcdTY1Mzkgc2xpY2VcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICBkcml2ZUxldHRlclxyXG4gICAgICAgICAgICArIG5hbWUuc2xpY2UoZHJpdmVMZXR0ZXIubGVuZ3RoKS5yZXBsYWNlKElOVkFMSURfQ0hBUl9SRUdFWCwgJycpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pO1xyXG59KTsiLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXHVzZXJcXFxcRGVza3RvcFxcXFxcdTcwNkJcdTdCQURcdTk2OEFcdTU3RjlcdThBMTNcXFxcdnVlLWZpbmFsXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFx1c2VyXFxcXERlc2t0b3BcXFxcXHU3MDZCXHU3QkFEXHU5NjhBXHU1N0Y5XHU4QTEzXFxcXHZ1ZS1maW5hbFxcXFxsb2FkRW52LmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy91c2VyL0Rlc2t0b3AvJUU3JTgxJUFCJUU3JUFFJUFEJUU5JTlBJThBJUU1JTlGJUI5JUU4JUE4JTkzL3Z1ZS1maW5hbC9sb2FkRW52LmpzXCI7aW1wb3J0IGRvdGVudiBmcm9tICdkb3RlbnYnXHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXHJcbmltcG9ydCBmcyBmcm9tICdmcydcclxuXHJcbmNvbnN0IGdldEN1cnJlbnRUaW1lU3RyaW5nID0gKCkgPT4ge1xyXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcclxuICBsZXQgaG91cnMgPSBub3cuZ2V0SG91cnMoKVxyXG4gIGNvbnN0IG1pbnV0ZXMgPSBTdHJpbmcobm93LmdldE1pbnV0ZXMoKSkucGFkU3RhcnQoMiwgJzAnKVxyXG4gIGNvbnN0IHNlY29uZHMgPSBTdHJpbmcobm93LmdldFNlY29uZHMoKSkucGFkU3RhcnQoMiwgJzAnKVxyXG4gIGNvbnN0IGFtcG0gPSBob3VycyA+PSAxMiA/ICdcdTRFMEJcdTUzNDgnIDogJ1x1NEUwQVx1NTM0OCdcclxuICBob3VycyAlPSAxMlxyXG4gIGhvdXJzID0gaG91cnMgfHwgMTJcclxuICBjb25zdCBob3Vyc1N0ciA9IFN0cmluZyhob3VycykucGFkU3RhcnQoMiwgJzAnKVxyXG4gIHJldHVybiBgJHthbXBtfSR7aG91cnNTdHJ9OiR7bWludXRlc306JHtzZWNvbmRzfWBcclxufVxyXG5cclxuY29uc3QgY3VzdG9tTG9nID0gKHRhZywgbWVzc2FnZSwgdGFnQ29sb3IgPSAnXFx4MWJbMzZtJywgbWVzc2FnZUNvbG9yID0gJ1xceDFiWzMybScpID0+IHtcclxuICBjb25zdCB0aW1lU3RyaW5nID0gZ2V0Q3VycmVudFRpbWVTdHJpbmcoKVxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgY29uc29sZS5sb2coYFxceDFiWzkwbSVzXFx4MWJbMG0gJHt0YWdDb2xvcn1cXHgxYlsxbSVzXFx4MWJbMG0gJHttZXNzYWdlQ29sb3J9JXNcXHgxYlswbWAsIHRpbWVTdHJpbmcsIGBbJHt0YWd9XWAsIG1lc3NhZ2UpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IChtb2RlKSA9PiB7XHJcbiAgY29uc3QgYmFzZVBhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJy5lbnYnKVxyXG4gIGNvbnN0IGVudlBhdGggPSBgJHtiYXNlUGF0aH0uJHttb2RlfWBcclxuICBjb25zdCBmaW5hbFBhdGggPSBmcy5leGlzdHNTeW5jKGVudlBhdGgpID8gZW52UGF0aCA6IGJhc2VQYXRoXHJcblxyXG4gIGNvbnN0IGVudkNvbmZpZyA9IGRvdGVudi5jb25maWcoeyBwYXRoOiBmaW5hbFBhdGggfSlcclxuXHJcbiAgaWYgKGVudkNvbmZpZy5lcnJvcikge1xyXG4gICAgY3VzdG9tTG9nKCd2aXRlJywgJ1x1NzEyMVx1NkNENVx1OEI4MFx1NTNENlx1NTIzMFx1NzRCMFx1NTg4M1x1OEI4QVx1NjU3OChFbnZpcm9ubWVudCBWYXJpYWJsZXMpXHU2QTk0XHU2ODQ4XHUzMDAyJylcclxuICAgIGN1c3RvbUxvZygndml0ZScsICdcdThBQ0JcdTU3MjhcdTdENDJcdTdBRUZcdTZBNUZcdThGMzhcdTUxNjVcdTMwMENjcCAuZW52LmV4YW1wbGUgLmVudlx1MzAwRCBcdTVFRkFcdTdBQ0JcdTc0QjBcdTU4ODNcdThCOEFcdTY1NzhcdTZBOTRcdTY4NDhcdTMwMDInKVxyXG4gICAgY3VzdG9tTG9nKCd2aXRlJywgJ1x1NzZFRVx1NTI0RFx1NTBDNVx1NjUyRlx1NjNGNCAuZW52XHUzMDAxLmVudi5kZXZlbG9wbWVudFx1MzAwMS5lbnYucHJvZHVjdGlvbiBcdTRFMDlcdTdBMkVcdTZBMjFcdTVGMEZcdTMwMDInKVxyXG4gIH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXFWLFNBQVMsZUFBZSxXQUFXO0FBRXhYLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUztBQUdoQixPQUFPLGtCQUFrQjs7O0FDTm9ULE9BQU8sWUFBWTtBQUNoVyxPQUFPLFVBQVU7QUFDakIsT0FBTyxRQUFRO0FBRWYsSUFBTSx1QkFBdUIsTUFBTTtBQUNqQyxRQUFNLE1BQU0sb0JBQUksS0FBSztBQUNyQixNQUFJLFFBQVEsSUFBSSxTQUFTO0FBQ3pCLFFBQU0sVUFBVSxPQUFPLElBQUksV0FBVyxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDeEQsUUFBTSxVQUFVLE9BQU8sSUFBSSxXQUFXLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRztBQUN4RCxRQUFNLE9BQU8sU0FBUyxLQUFLLGlCQUFPO0FBQ2xDLFdBQVM7QUFDVCxVQUFRLFNBQVM7QUFDakIsUUFBTSxXQUFXLE9BQU8sS0FBSyxFQUFFLFNBQVMsR0FBRyxHQUFHO0FBQzlDLFNBQU8sR0FBRyxJQUFJLEdBQUcsUUFBUSxJQUFJLE9BQU8sSUFBSSxPQUFPO0FBQ2pEO0FBRUEsSUFBTSxZQUFZLENBQUMsS0FBSyxTQUFTLFdBQVcsWUFBWSxlQUFlLGVBQWU7QUFDcEYsUUFBTSxhQUFhLHFCQUFxQjtBQUV4QyxVQUFRLElBQUkscUJBQXFCLFFBQVEsb0JBQW9CLFlBQVksYUFBYSxZQUFZLElBQUksR0FBRyxLQUFLLE9BQU87QUFDdkg7QUFFQSxJQUFPLGtCQUFRLENBQUMsU0FBUztBQUN2QixRQUFNLFdBQVcsS0FBSyxRQUFRLFFBQVEsSUFBSSxHQUFHLE1BQU07QUFDbkQsUUFBTSxVQUFVLEdBQUcsUUFBUSxJQUFJLElBQUk7QUFDbkMsUUFBTSxZQUFZLEdBQUcsV0FBVyxPQUFPLElBQUksVUFBVTtBQUVyRCxRQUFNLFlBQVksT0FBTyxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbkQsTUFBSSxVQUFVLE9BQU87QUFDbkIsY0FBVSxRQUFRLGlHQUFxQztBQUN2RCxjQUFVLFFBQVEsbUlBQXlDO0FBQzNELGNBQVUsUUFBUSwrR0FBbUQ7QUFBQSxFQUN2RTtBQUNGOzs7QURsQzZMLElBQU0sMkNBQTJDO0FBVTlPLElBQU0scUJBQXFCO0FBQzNCLElBQU0scUJBQXFCO0FBRzNCLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsS0FBSyxNQUFNO0FBQ3hDLGtCQUFRLElBQUk7QUFDWixTQUFRO0FBQUEsSUFDTixNQUFNLFFBQVEsSUFBSSxhQUFhLGVBQWUsSUFBSSxRQUFRLElBQUksZUFBZSxNQUFNO0FBQUEsSUFDbkYsU0FBUztBQUFBLE1BQ1AsSUFBSTtBQUFBLE1BQ0osYUFBYTtBQUFBLFFBQ1gsU0FBUyxDQUFDLGVBQWUsZ0JBQWdCLFlBQVksV0FBVztBQUFBLE1BQ2xFLENBQUM7QUFBQSxJQUNIO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDUCxPQUFPO0FBQUEsUUFDTCxLQUFLLGNBQWMsSUFBSSxJQUFJLFNBQVMsd0NBQWUsQ0FBQztBQUFBLE1BQ3REO0FBQUEsSUFDRjtBQUFBLElBQ0EsT0FBTztBQUFBLE1BQ0wsZUFBZTtBQUFBLFFBQ2IsUUFBUTtBQUFBO0FBQUEsVUFFTixpQkFBaUIsTUFBTTtBQUNyQixrQkFBTSxRQUFRLG1CQUFtQixLQUFLLElBQUk7QUFDMUMsa0JBQU0sY0FBYyxRQUFRLE1BQU0sQ0FBQyxJQUFJO0FBRXZDLG1CQUNFLGNBQ0EsS0FBSyxNQUFNLFlBQVksTUFBTSxFQUFFLFFBQVEsb0JBQW9CLEVBQUU7QUFBQSxVQUVqRTtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
